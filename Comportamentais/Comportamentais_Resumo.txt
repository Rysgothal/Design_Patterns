[ Chain of Responsibility ]
	- Baixo acoplamento e alta coesão
	- Remover fortes dependencias 
	- Responsabilidade única 
	
[ Command ]
	- Encapsular requisições como Objeto
	- "Empilhar" vários comandos e executá-los de uma só vez somente quando necessário
	- Comandos atuam como "conexões" entre o cliente e as ações desejadas do Objeto
	
[ Interpreter ] 
	- Fornecer um dado de entrada e solicitar que o padrão de projeto execute as interpretações
	
	Elementos:
		TerminalExpression: Representa expressões independentes que podem avaliar a entrada de modo imediato.
		NonTerminalExpression: É composto por outras expressões para interpretar o contexto
	
	- TerminalExpression são como variáveis e NonTerminalExpression são semelhantes a operadores lógicos.

[ Iterator ]
	- Poder "transformar" uma classe em uma estrutura que permita a iteração dos dados processador por ela
	- Disponibilizar uma forma de percorrer uma lista(ou coleção) sem a necessidade de conhecer a representação dos dados
	- Padronizar mecanismo de navegação
	- imparcialidade dos tipos de dados carregados
	
[ Mediator ] 
	- Mecanismo de encapsulamento das interações que ocorrem entre Objetos diferentes
	- Baixo nivel de acoplamento
	- Adequado para cenários em que muitas classes referenciam muitas classes
	
	Elementos:
		Mediator: Interface que define os métodos de comunicação entre os objetos;
		Concrete Mediator: Classe concreta que implementa a Interface Mediator;
		Colleague: Interface que define os métodos referente às “intenções” dos objetos;
		Concrete Colleague: Classe concreta que implementa a Interface Colleage.
		
[ Memento ]
	- Permitir se lembre dos estados anteriores de um Objeto.
	- Poder restaurar um estado anterior do Objeto
	- Ctrl+Z, RollBack ...
	
[ Observer ]
	- Permitir o Objeto receber dados ou notificação, sem saber quem foi o emissor.
	- Baixo acoplamento
	- Fortes dependencias não estabelecidas
	
	Elementos:
		Subject: Interface que define a assinatura de métodos das classes que serão observáveis;
		Concrete Subject: implementação da Interface Subject;
		Observer: Interface que define a assinatura de métodos das classes que serão observadoras;
		Concrete Observer: implementação da Interface Observer;
	
[ State ]
	- Desfazer o alinhamento condicional
	- Trocar o estado com regras estabelecidas
	
	Elementos: 
		State: Interface que declara os métodos que poderão ser executados pelos estados do objeto;
		Concrete State: implementa a Interface State para definir cada estado possível do objeto;
		Context: representa o estado atual do objeto, invocando seus métodos.
		
[ Strategy ]
	- Selecionar e usar um algoritmo em tempo de execução
	- Estratégias de execução
	- Exemplos: Pagamentos (cartão de crédito, débito ou voucher), Login com multiplas contas
	- Por mais que tenha rotina diferente, o objetivo final será o mesmo